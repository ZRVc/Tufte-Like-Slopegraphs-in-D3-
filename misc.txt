ineq1 <- inequalitymaker2(y_start)
inequalitymaker2 <- function(y, constr0=constr, pres_ord0=pres_ord, optLmat=NULL, optQmat=NULL) {
  
  iq <- rep(0,(length(y)+2))
  
  if(1 %in% constr0) {
    iq <- rbind(iq,slope_ineq(y))
  }
  if(3 %in% constr0) {
    iq <- rbind(iq,unname(fin_persp_ineq(y,colmn=1)))
  }
  if(4 %in% constr0) {
    iq <- rbind(iq,unname(fin_persp_ineq(y,colmn=2)))
  }
  if((5 %in% constr0) && (length(optQmat < 1)) && (length(optLmat) > 0)) {
    for(i in 1:length(iq[,1])) {
      for(j in 1:nrow(optLmat)) {
        if(sum(optLmat[j,1:length(y)]-iq[i,1:length(y)])==0) {
          iq[i,] <- optLmat[j,]
          if(j==1) {
            optLmat <- optLmat[2:nrow(optLmat)]
          } else if(j==nrow(optLmat)) {
            optLmat <- optLmat[1:(nrow(optLmat)-1),]
          } else {
            optLmat <- rbind(optLmat[1:(j-1),],optLmat[(j+1):nrow(optLmat),])
          }
        }
      }
    }
    if(length(optLmat) > 0) {
      iq <- rbind(iq,optLmat)
    }
  }
  
  if (sum(pres_ord0) < 2) {
    q <- rep(list(NULL),(length(iq[,1])))
    
    for(i in 1:2) {
      if(pres_ord0[i] == FALSE) {
        iq <- rbind(iq,unname(spacing_ineqQ(y,colmn=i)[[2]]))
        q <- c(q,unname(spacing_ineqQ(y,colmn=i)[[1]]))
      } else {
        iq <- rbind(iq,unname(spacing_ineqL(y,colmn=i)))
        q <- c(q,rep(list(NULL),length(unname(spacing_ineqL(y,colmn=i))[,1])))
      }
    }
    iq <- iq[2:length(iq[,1]),]
    q <- q[2:length(q)]
    
    dir1 <- iq[,(length(y)+1)]
    dir1[which(dir1 == 1)] <- ">="
    dir1[which(dir1 == 2)] <- "<="
    
    rhs1 <- iq[,(length(y)+2)]
    
    iq <- iq[,1:length(y)]
    
    if((sum(sapply(q, function(x) length(x))) > 0)) {
      return(Q_constraint(Q=q, L=iq, dir=dir1, rhs=rhs1))
    } else {
      return(L_constraint(L=iq, dir=dir1, rhs=rhs1))
    }
  } else {
    iq <- rbind(iq,unname(spacing_ineqL(y,colmn=1)))
    iq <- rbind(iq,unname(spacing_ineqL(y,colmn=2)))
    
    iq <- iq[2:length(iq[,1]),]
    
    dir1 <- iq[,(length(y)+1)]
    dir1[which(dir1 == 1)] <- ">="
    dir1[which(dir1 == 2)] <- "<="
    
    rhs1 <- iq[,(length(y)+2)]
    
    iq <- iq[,1:length(y)]
    
    return(iq)
    #return(L_constraint(L=iq, dir=dir1, rhs=rhs1))
  }
}
